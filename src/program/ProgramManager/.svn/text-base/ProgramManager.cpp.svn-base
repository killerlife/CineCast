// ProgramManager.cpp : 定义 DLL 应用程序的入口点。
//
#include "ProgramManager.h"
#include "activeThread.h"
#include "brunt/debugPrint.h"
#include "config/config.h"

#include <sstream>
#include <string>
#include <vector>
#include <boost/thread/condition.hpp>
#include <boost/thread/mutex.hpp>
//#include <boost/thread/recursive_mutex.hpp>
#include <boost/thread/thread.hpp>
#include <boost/thread/xtime.hpp>

using namespace std;
using namespace brunt;


#ifdef SIZEOF_ARY
#undef SIZEOF_ARY
#endif//SIZEOF_ARY

#define SIZEOF_ARY(a)	(sizeof(a)/sizeof(a[0]))

class CProgramManager: public IProgramManager, public CActiveThread
{
public:
	IProgramQuery* getIProgramQuery(int nSource);
	IProgramImport* getIProgramImport();
	// update programs' info of some source 
	virtual int update(const vector<int>& updateSrcList);
	// the program data whether is ready
	virtual bool isReady(int nSource);
	// get error message
	virtual int getLastError(string* msg);

	CProgramManager();
	virtual ~CProgramManager();

protected:
	struct TQueryInfo{
		string root;
		IProgramQuery* query;
		TQueryInfo():query(NULL){};
	};

	virtual void init();
	virtual void doit();
	virtual void release();

	void loadInfo(int nSrc);
	std::string getProgramPath(const std::string& programId);
	inline const char* getProgramSrc(int src);
	void cleanThread();

	TQueryInfo m_queryInfoList[PST_SIZEOF];
//	std::vector<struct InfoData> m_programInfoList[PST_SIZEOF];	// 0: hdisk , 1: USB
	boost::mutex m_mutexQueryList;
	bool m_infoValidMark[PST_SIZEOF];	// map of m_programInfoList for data validation
	std::vector<int> m_updateSrcList;		// loadInfo() parameters
//	bool m_updateOk;
   	int m_error; 

};


IProgramManager* getIProgramManager()
{
	static CProgramManager _manager;
	return &_manager;
}

#ifdef _WIN32
#include "stdafx.h"
BOOL APIENTRY DllMain( HANDLE hModule, 
                       DWORD  ul_reason_for_call, 
                       LPVOID lpReserved
					 )
{
    return TRUE;
}
#endif//_WIN32



CProgramManager::CProgramManager()
{
//	m_updateOk = true;
	m_error = 0;
	memset(m_infoValidMark, false, sizeof(m_infoValidMark));
}

CProgramManager::~CProgramManager()
{
	cleanThread();
}

IProgramQuery* CProgramManager::getIProgramQuery(int nSource)
{
	if(nSource>=0 && nSource<PST_SIZEOF)
		return m_queryInfoList[nSource].query;
	return NULL;
}

IProgramImport* CProgramManager::getIProgramImport()
{
	return NULL;
}

// update programs' info of some source 
int CProgramManager::update(const vector<int>& updateSrcList)
{
	if(!(status() == thread_stopped || status() == thread_ready ))
	{
		DPRINT((DP_Error, "CProgramManager", "The thread had not been ready, status = %d.", status()));
		return -1;
	}

	if(isStopped())
	{
		cleanThread();
	}

	m_updateSrcList = updateSrcList;
	if(!start())
	{
		DPRINT((DP_Error, "CProgramManager", "Start thread failed, status = %d.", status()));
		return -1;
	}

	for(int i=0; i<m_updateSrcList.size(); i++)
	{
		if(m_updateSrcList[i]>=0 && m_updateSrcList[i]<PST_SIZEOF)
			m_infoValidMark[m_updateSrcList[i]] = false;
	}

	return 0;
}

// the program data whether is ready
bool CProgramManager::isReady(int nSource)
{
	if(nSource>=0 && nSource<PST_SIZEOF)
		return m_infoValidMark[nSource];
	return false;
}

int CProgramManager::getLastError(string* msg)
{
	if(msg)
	{
//	switch(m_error)
//	{
//	case :
//		*msg = "";
//		break;
//	}
	}
	return m_error;
}


void CProgramManager::init()
{
//	m_updateOk = false;
	return CActiveThread::init();
}

void CProgramManager::doit()
{
	for(int i=0; i<m_updateSrcList.size() && status()!=thread_stoping; i++)
	{
		assert(m_updateSrcList[i]>=0 && m_updateSrcList[i]<PST_SIZEOF);
		if(m_updateSrcList[i]>=0 && m_updateSrcList[i]<PST_SIZEOF)
		{
			loadInfo(m_updateSrcList[i]);
		}
	}
}

void CProgramManager::release()
{
//	m_updateOk = true;
	return CActiveThread::release();
}

void CProgramManager::cleanThread()
{
	CActiveThread::stop();
}

//
void CProgramManager::loadInfo(int nSrc)
{
	if(nSrc<0 || nSrc>=PST_SIZEOF)
		return;

	IProgramQuery* p = createProgramQuery();
	if(!p) return;

	string root;
	if(nSrc==PST_HDD)
		root = getConfig().getProgramRootPath();
	else
		root = getConfig().getUsbRootPath();

	if(p->open(root, true)!=0)
	{
		DPRINT((DP_Error, "CProgramManager", "IProgramQuery->open(%s) failed.", root.c_str()));
//		releaseProgramQuery(p);
//		return;
	}

	boost::mutex::scoped_lock lock(m_mutexQueryList);
	if(m_queryInfoList[nSrc].query)
		releaseProgramQuery(m_queryInfoList[nSrc].query);
	m_queryInfoList[nSrc].query = p;
	m_queryInfoList[nSrc].root = root;
	m_infoValidMark[nSrc] = true;
}



